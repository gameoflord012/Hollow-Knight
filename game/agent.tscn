[gd_scene load_steps=14 format=3 uid="uid://camdrlaxyj4rd"]

[ext_resource type="Script" path="res://game/Agent.gd" id="1_1ekgd"]
[ext_resource type="PackedScene" uid="uid://by18bfq07s8m7" path="res://enemy/Sample/enemy.tscn" id="2_hmo1x"]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_lsufn"]
radius = 36.0
height = 98.0

[sub_resource type="GDScript" id="GDScript_152o8"]
script/source = "extends StateMachine

var characterBody2D : CharacterBody2D

func _enter_tree():
	characterBody2D = $\"..\"

func get_moving_axis():
	return Input.get_axis(\"move_left\", \"move_right\")
	

"

[sub_resource type="GDScript" id="GDScript_74t8p"]
script/source = "extends StateBase
"

[sub_resource type="GDScript" id="GDScript_svocx"]
script/source = "extends StateBase

@export var speed : float = 500

@onready var characterBody : CharacterBody2D = $\"../..\"

func _state_enter():
	pass
	
func _state_physics_process(delta):
	var direction = stateMachine.get_moving_axis()
	
	if direction:
		characterBody.velocity.x = direction * speed
	else:
		characterBody.velocity.x = move_toward(characterBody.velocity.x, 0, speed)
		
	characterBody.move_and_slide()
	
func _state_exit():
	pass
	
func _can_transition_to(stateName) -> bool:
	if stateName == \"Jump\":
		return Input.is_action_just_pressed(\"jump\")
		
	if stateName == \"Air\":
		return not characterBody.is_on_floor()
		
	return false;
"

[sub_resource type="GDScript" id="GDScript_s487l"]
script/source = "extends StateBase

@export var jump_velocity := -1000

@onready var characterBody : CharacterBody2D = $\"../..\"

func _state_enter():
	characterBody.velocity.y = jump_velocity
	
func _can_transition_to(state_name) -> bool:
	if state_name == \"Air\" :
		return true
	return false
	
"

[sub_resource type="GDScript" id="GDScript_bg5aa"]
script/source = "extends StateBase

@onready var jump = $\"../Jump\"

func _state_enter():
	jump._state_enter()
	
func _can_transition_to(state_name) -> bool:
	if state_name == \"Air2\" :
		return true
	return false
"

[sub_resource type="GDScript" id="GDScript_r6d7i"]
script/source = "extends StateBase

@export var gravity : float = ProjectSettings.get_setting(\"physics/2d/default_gravity\")	
@export var speedX : float = 1000
@export var uAirDrag = 20

@onready var characterBody : CharacterBody2D = $\"../..\"

func _state_physics_process(delta):
	if not characterBody.is_on_floor():
		characterBody.velocity.y += gravity * delta
	
	if stateMachine.get_moving_axis():
		characterBody.velocity.x =  stateMachine.get_moving_axis() * speedX
	else:
		characterBody.velocity.x -= characterBody.velocity.x * uAirDrag * delta
	
	characterBody.move_and_slide()
	
func _can_transition_to(stateName) -> bool:
	match stateName:
		\"Ground\":
			return characterBody.is_on_floor()
			
		\"Jump2\":
			return Input.is_action_just_pressed(\"jump\")
		
		\"WallSlide\":
			return $\"../WallSlide\".is_hug_wall()
				
	return false
"

[sub_resource type="GDScript" id="GDScript_o2lqo"]
script/source = "extends StateBase

@onready var air = $\"../Air\"

func _state_physics_process(delta):
	air._state_physics_process(delta)

func _can_transition_to(stateName) -> bool:
	if(stateName != \"Jump2\"):
		return air._can_transition_to(stateName)
	return false
"

[sub_resource type="GDScript" id="GDScript_l231q"]
script/source = "extends StateBase

@export var fallingVelocity : float = 200
@export var wallDistance : float = 100
@export var releaseWallDuration := 0.05

var charBody : CharacterBody2D 

var isOnWall := false
var isOnLeftWall := false
var isOnRightWall := false

var releaseWallTimer = 0

func _ready(): 
	charBody = stateMachine.characterBody2D

func _state_enter():
	charBody.velocity.y = fallingVelocity
	
func _state_physics_process(delta):
	if charBody.get_last_slide_collision():
		charBody.velocity.x = 0
	else:
		charBody.velocity.x = get_wall_axis() * fallingVelocity
		
	print(charBody.velocity)	
		
	charBody.move_and_slide()
	
func _physics_process(delta):
	if stateMachine.currentState != self:
		isOnLeftWall = wall_check(Vector2.LEFT)
		isOnRightWall = wall_check(Vector2.RIGHT)
	
	if not is_release_wall():
		releaseWallTimer = 0
	else:
		releaseWallTimer += delta
	
func wall_check(wallDirection : Vector2) -> bool:
	var raycastResult = Physics2D.linecast(self, 
		global_position,
		global_position + wallDirection.normalized() * wallDistance,
		0xFFFFFFFF,
		[charBody])

	return not raycastResult.is_empty()
	
func is_hug_wall() -> bool:
	return \\
		Input.is_action_pressed(\"move_left\") and isOnLeftWall or \\
		Input.is_action_pressed(\"move_right\") and isOnRightWall

func is_release_wall() -> bool:
	return \\
		Input.is_action_pressed(\"move_left\") and isOnRightWall or \\
		Input.is_action_pressed(\"move_right\") and isOnLeftWall
		
func get_wall_axis() -> int:
	if isOnLeftWall: return -1
	elif isOnRightWall: return 1
	return 0
		
func _can_transition_to(stateName) -> bool: 
	match stateName:
		\"Air\":
			return releaseWallTimer > releaseWallDuration
			
		\"Ground\":
			return charBody.is_on_floor()
		
		\"WallJump\":
			return Input.is_action_just_pressed(\"jump\")
			
	return false;
	
func _draw():
	draw_line(Vector2(-wallDistance, 0), Vector2(wallDistance, 0), Color.RED)
	
"

[sub_resource type="GDScript" id="GDScript_rqeow"]
script/source = "extends StateBase

@export var jumpVelocity : Vector2 = Vector2(1000, 1000)
@export var jumpDuration = 0.1

@onready var charBody : CharacterBody2D = stateMachine.characterBody2D
@onready var wallSlide = $\"../WallSlide\"

var jumpTimer = 0
var wallJumpDirection = 0

func _state_enter():
	wallJumpDirection = -wallSlide.get_wall_axis()
	charBody.velocity.x = wallJumpDirection * jumpVelocity.x
	charBody.velocity.y = -abs(jumpVelocity.y)
	
	jumpTimer = 0
	
func _state_physics_process(delta):
	jumpTimer += delta
	charBody.move_and_slide()
	
func _can_transition_to(state_name) -> bool:
	match state_name:
		\"Air\":
			return jumpTimer > jumpDuration
		\"WallSlide\":
			return wallJumpDirection == wallSlide.get_wall_axis()
			
	return false
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_v3ixk"]
size = Vector2(1040, 38)

[node name="Node2D" type="Node2D"]

[node name="CharacterBody2D" type="CharacterBody2D" parent="." groups=["Player"]]
position = Vector2(218, -70)
wall_min_slide_angle = 0.506145
script = ExtResource("1_1ekgd")

[node name="CollisionShape2D" type="CollisionShape2D" parent="CharacterBody2D"]
shape = SubResource("CapsuleShape2D_lsufn")
metadata/_edit_lock_ = true

[node name="StateMachine" type="Node2D" parent="CharacterBody2D"]
position = Vector2(4, 4)
script = SubResource("GDScript_152o8")
default_state_name = "Air"

[node name="None" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_74t8p")

[node name="Ground" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_svocx")

[node name="Jump" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_s487l")

[node name="Jump2" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_bg5aa")

[node name="Air" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_r6d7i")
gravity = 5000.0
speedX = 700.0
uAirDrag = 14

[node name="Air2" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_o2lqo")

[node name="WallSlide" type="Node2D" parent="CharacterBody2D/StateMachine"]
scale = Vector2(1.02149, 1)
script = SubResource("GDScript_l231q")
fallingVelocity = 70.0
wallDistance = 40.0
releaseWallDuration = 0.0

[node name="WallJump" type="Node2D" parent="CharacterBody2D/StateMachine"]
script = SubResource("GDScript_rqeow")

[node name="Camera2D" type="Camera2D" parent="CharacterBody2D"]
position_smoothing_enabled = true
drag_horizontal_enabled = true
drag_left_margin = 0.1

[node name="level" type="Node2D" parent="."]

[node name="StaticBody2D" type="StaticBody2D" parent="level"]
position = Vector2(-24, 309)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="StaticBody2D2" type="StaticBody2D" parent="level"]
position = Vector2(48, -40)
rotation = -1.57079
scale = Vector2(0.64, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D2"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="StaticBody2D3" type="StaticBody2D" parent="level"]
position = Vector2(-328, -328)
rotation = -1.57079
scale = Vector2(1.28, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D3"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="StaticBody2D5" type="StaticBody2D" parent="level"]
position = Vector2(-136, -648)
rotation = -1.57079
scale = Vector2(0.64, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D5"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="StaticBody2D6" type="StaticBody2D" parent="level"]
position = Vector2(72, -344)
rotation = -1.57079
scale = Vector2(0.0399988, 6)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D6"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="StaticBody2D4" type="StaticBody2D" parent="level"]
position = Vector2(704, 208)
rotation = -1.57079
scale = Vector2(0.177169, 7.12706)

[node name="CollisionShape2D" type="CollisionShape2D" parent="level/StaticBody2D4"]
position = Vector2(0, -23)
shape = SubResource("RectangleShape2D_v3ixk")
metadata/_edit_lock_ = true

[node name="Enemy" parent="." instance=ExtResource("2_hmo1x")]
position = Vector2(463, 14)
